const f=(e,s)=>{const n=e.toLowerCase(),o=s.toLowerCase(),a=[];let l=0,r=0;const u=(t,p=!1)=>{let c="";r===0?c=t.length>20?`… ${t.slice(-20)}`:t:p?c=t.length+r>100?`${t.slice(0,100-r)}… `:t:c=t.length>20?`${t.slice(0,20)} … ${t.slice(-20)}`:t,c&&a.push(c),r+=c.length,p||(a.push(["strong",s]),r+=s.length,r>=100&&a.push(" …"))};let i=n.indexOf(o,l);if(i===-1)return null;for(;i>=0;){const t=i+o.length;if(u(e.slice(l,i)),l=t,r>100)break;i=n.indexOf(o,l)}return r<100&&u(e.slice(l),!0),a};function $(e){return e}const h=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},d="__vueuse_ssr_handlers__";h[d]=h[d]||{};var g;(function(e){e.UP="UP",e.RIGHT="RIGHT",e.DOWN="DOWN",e.LEFT="LEFT",e.NONE="NONE"})(g||(g={}));var m=Object.defineProperty,y=Object.getOwnPropertySymbols,C=Object.prototype.hasOwnProperty,w=Object.prototype.propertyIsEnumerable,I=(e,s,n)=>s in e?m(e,s,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[s]=n,N=(e,s)=>{for(var n in s||(s={}))C.call(s,n)&&I(e,n,s[n]);if(y)for(var n of y(s))w.call(s,n)&&I(e,n,s[n]);return e};const Q={easeInSine:[.12,0,.39,0],easeOutSine:[.61,1,.88,1],easeInOutSine:[.37,0,.63,1],easeInQuad:[.11,0,.5,0],easeOutQuad:[.5,1,.89,1],easeInOutQuad:[.45,0,.55,1],easeInCubic:[.32,0,.67,0],easeOutCubic:[.33,1,.68,1],easeInOutCubic:[.65,0,.35,1],easeInQuart:[.5,0,.75,0],easeOutQuart:[.25,1,.5,1],easeInOutQuart:[.76,0,.24,1],easeInQuint:[.64,0,.78,0],easeOutQuint:[.22,1,.36,1],easeInOutQuint:[.83,0,.17,1],easeInExpo:[.7,0,.84,0],easeOutExpo:[.16,1,.3,1],easeInOutExpo:[.87,0,.13,1],easeInCirc:[.55,0,1,.45],easeOutCirc:[0,.55,.45,1],easeInOutCirc:[.85,0,.15,1],easeInBack:[.36,0,.66,-.56],easeOutBack:[.34,1.56,.64,1],easeInOutBack:[.68,-.6,.32,1.6]};N({linear:$},Q);const b=Object.entries,v=Object.keys,E=e=>e.reduce((s,{type:n})=>s+(n==="title"?50:n==="heading"?20:n==="custom"?10:1),0),_=(e,s)=>{var n;const o={};for(const[a,l]of b(s)){const r=((n=s[a.replace(/\/[^\\]*$/,"")])==null?void 0:n.title)||"",u=`${r?`${r} > `:""}${l.title}`,i=f(l.title,e);i&&(o[u]=[...o[u]||[],{type:"title",path:a,display:i}]),l.customFields&&b(l.customFields).forEach(([t,p])=>{p.forEach(c=>{const O=f(c,e);O&&(o[u]=[...o[u]||[],{type:"custom",path:a,index:t,display:O}])})});for(const t of l.contents){const p=f(t.header,e);p&&(o[u]=[...o[u]||[],{type:"heading",path:a+(t.slug?`#${t.slug}`:""),display:p}]);for(const c of t.contents){const O=f(c,e);O&&(o[u]=[...o[u]||[],{type:"content",header:t.header,path:a+(t.slug?`#${t.slug}`:""),display:O}])}}}return v(o).sort((a,l)=>E(o[a])-E(o[l])).map(a=>({title:a,contents:o[a]}))},P=JSON.parse("{\"/\":{\"/intro.html\":{\"title\":\"Intro Page\",\"contents\":[{\"header\":\"\",\"slug\":\"\",\"contents\":[\"Place your introduction and profile here.\"]}]},\"/slides.html\":{\"title\":\"Slide page\",\"contents\":[]},\"/work/token/%E5%93%A5%E4%BB%AC%E4%B8%8D%E5%81%A5%E5%BF%98.html\":{\"title\":\"总是记不住东西怎么办？只能这样了！\",\"contents\":[{\"header\":\"\",\"slug\":\"\",\"contents\":[\"GITHUB 相关\"]}],\"customFields\":{\"0\":[\"HTML\"],\"1\":[\"工作\",\"随笔\"]}},\"/work/documents/blog/PicGOGITHUB%E5%9B%BE%E5%BA%8A.html\":{\"title\":\"10分钟用PicGO+Github+VScode搭建自己的便捷图床\",\"contents\":[{\"header\":\"1.PicGO 下载\",\"slug\":\"_1-picgo-下载\",\"contents\":[]},{\"header\":\"应用概述\",\"slug\":\"应用概述\",\"contents\":[\"PicGo: 一个用于快速上传图片并获取图片 URL 链接的工具\",\"PicGo 本体支持如下图床：\",\"七牛图床 v1.0\",\"腾讯云 COS v4\\\\v5 版本 v1.1 & v1.5.0\",\"又拍云 v1.2.0\",\"GitHub v1.5.0\",\"SM.MS V2 v2.3.0-beta.0\",\"阿里云 OSS v1.6.0\",\"Imgur v1.6.0\"]},{\"header\":\"特色功能\",\"slug\":\"特色功能\",\"contents\":[\"支持拖拽图片上传\",\"支持快捷键上传剪贴板里第一张图片\",\"Windows 和 macOS 支持右键图片文件通过菜单上传\",\"上传图片后自动复制链接到剪贴板\",\"支持自定义复制到剪贴板的链接格式\",\"支持修改快捷键，默认快速上传快捷键：command+shift+p（macOS）| control+shift+p（Windows\\\\Linux)\",\"支持插件系统，已有插件支持 Gitee、青云等第三方图床 \",\"更多第三方插件以及使用了 PicGo 底层的应用可以在 Awesome-PicGo (opens new window) 找到。欢迎贡献！\",\"支持通过发送 HTTP 请求调用 PicGo 上传\"]}],\"customFields\":{\"0\":[\"VSCODE\",\"GITHUB\"],\"1\":[\"工作\",\"随笔\"]}},\"/work/documents/blog/VSCODE%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5.html\":{\"title\":\"拒绝重复代码，高效摸鱼！！\",\"contents\":[{\"header\":\"一、起步\",\"slug\":\"一、起步\",\"contents\":[]},{\"header\":\"1.如何设置\",\"slug\":\"_1-如何设置\",\"contents\":[\"Windows 系统: 文件 > 首选项 > 用户代码片段\",\"Mac 系统: Code > 首选项 > 用户片段\"]},{\"header\":\"2. 选择已有代码片段或创建代码片段（可以对现有的进行修改，也可以新建代码片段）\",\"slug\":\"_2-选择已有代码片段或创建代码片段-可以对现有的进行修改-也可以新建代码片段\",\"contents\":[\"代码片段分两种：\",\"全局代码片段（每种语言环境下都能触发代码块）。\",\"对应语言的局部代码片段（只能在对应语言环境下才能触发），新建全局代码片段会在 snippets 目录下生成 .code-snippets 为后缀的配置文件，而新建对应语言的代码片段会生成 对应语言 + .json 的配置文件。\",\"下图是创建代码块的开始界面：\",\"如：我们新建一个叫 my-snippets 的代码片段文件\",\"新建完之后会出现默认的示例，看起来是个类似 json 的配置文件。\",\"接下来我们可以在开心的在新建的 my-snippets.code-snippets 文件中设置我们的代码片段了。 😀😀😀\"]},{\"header\":\"二、Snippet 语法\",\"slug\":\"二、snippet-语法\",\"contents\":[\"然而创建后的默认示例你可能会懵逼，这，都是些啥？ 😳 😳 😳\",\"接下来就用这个默认示例讲解一下 VSCode 的 Snippet 语法。\",\"Example 下面的 Print to console 对应代码片段名称（触发代码片段的时候会展示匹配到的代码片段名称）。\",\"prefix 对应触发代码片段的字符。\",\"body 对应代码片段内容，可以是字符串，也可以为数组，若为数组每个元素都做为单独的一行插入。body 的内容支持 js 的转义字符，如 \\\\n\\\\r 等，我个人不建议用 \\\\n ，可另起一行给数组多插入一项，不然一行太多的话不容易观察代码块的格式。\",\"description 对应代码片段描述。\"]},{\"header\":\"1.占位符 $\",\"slug\":\"_1-占位符\",\"contents\":[\"log 方法中 $ 后面紧跟数字可指定代码片段触发落入编辑器之后的光标位置，光标位置按照从小到大排序。 log 方法中当你输入 log + TAB 之后光标会默认落到 log() 的括号中（$1 的位置），如果此时没有手动移动光标位置，再次按 TAB 则光标会落到 console.log() 的第二行（ $2 的位置），当然，你也可以设置 $3、$4 ... 等等。\",\"需要注意的是：👇\",\"$0 用于设置最终光标的位置，设置了 $0 之后，再往后设置其他占位符则不会生效， $0 终止了 TAB键 的光标跳转操作。\"]},{\"header\":\"2.占位内容的可选项\",\"slug\":\"_2-占位内容的可选项\",\"contents\":[\"上面是一个简单的方法注释代码块，占位符默认不带可选项，如果要设置占位内容的可选项，写法为 ${1|a,b,c}，括号中的 1 对应的是按 TAB 之后的光标落点顺序， abc 为可选的项，用逗号隔开。所以上面的代码在输入 zs + TAB 后第一个光标会落在 param name... {} 的大括号中（$1 的位置），如下图可以看到设置的可选项。\",\"选择了参数类型之后，再次按 TAB , 光标会自动落到返回参数类型处（$2 的位置）并弹出可选项。如下所示：\",\"选择了第二个选项之后，再次按 TAB ,光标自动落到我们配置的 $0 处，也就是 */ 的下一行：\",\"需要注意的是：👇\",\"如果可选择内容只有一个值的话可以写成 ${1:default} 的格式。\",\"占位内容支持嵌套，比如 ${1:another ${2:placeholder}}。\"]},{\"header\":\"3.变量\",\"slug\":\"_3-变量\",\"contents\":[\"使用 $name 或者 ${name:default} 可以插入变量的值。如果未设置变量，则会插入其默认值或空字符串。当变量未知（未定义其名称）时，会将插入的变量名称转换为占位符。\",\"VSCode 中可以使用以下变量：\",\"1）文档相关：\",\"变量\",\"变量含义\",\"TM_SELECTED_TEXT\",\"当前选定的文本或空字符串\",\"TM_CURRENT_LINE\",\"当前行的内容\",\"TM_CURRENT_WORD\",\"光标下的单词内容或空字符串\",\"TM_LINE_INDEX\",\"基于零索引的行号\",\"TM_LINE_NUMBER\",\"基于单索引的行号\",\"TM_FILENAME\",\"当前文档的文件名\",\"TM_FILENAME_BASE\",\"当前文档没有扩展名的文件名\",\"TM_DIRECTORY\",\"当前文档的目录\",\"TM_FILEPATH\",\"当前文档的完整文件路径\",\"CLIPBOARD\",\"剪贴板的内容\",\"WORKSPACE_NAME\",\"已打开的工作空间或文件夹的名称\",\"2）当前日期和时间：\",\"变量\",\"变量含义\",\"CURRENT_YEAR\",\"当前年份\",\"CURRENT_YEAR_SHORT\",\"当前年份的最后两位数\",\"CURRENT_MONTH\",\"月份为两位数（例如'02'）\",\"CURRENT_MONTH_NAME\",\"月份的全名（例如'June'）（中文语言对应六月）\",\"CURRENT_MONTH_NAME_SHORT\",\"月份的简称（例如'Jun'）（中文语言对应是 6 月）\",\"CURRENT_DATE\",\"这个月的哪一天\",\"CURRENT_DAY_NAME\",\"当天是星期几（例如'星期一'）\",\"CURRENT_DAY_NAME_SHORT\",\"当天是星期几的简称（例如'Mon'）（中文对应周一）\",\"CURRENT_HOUR\",\"24 小时时钟格式的当前小时\",\"CURRENT_MINUTE\",\"当前分\",\"CURRENT_SECOND\",\"当前秒\",\"3）要插入行或块注释，请遵循当前语言：\",\"变量\",\"变量含义\",\"BLOCK_COMMENT_START\",\"输出：PHP /*或 HTML 格式<!--\",\"BLOCK_COMMENT_END\",\"输出：PHP */或 HTML 格式-->\",\"LINE_COMMENT\",\"输出：PHP //或 HTML 格式\",\"举个栗子：\",\"下面的代码块是常用的文件顶部添加作者和时间的块注释，其中用到了年（CURRENT_YEAR）月（CURRENT_MONTH）日（$CURRENT_DATE）的系统变量。\",\"再举个栗子：\",\"下面的代码块是新建 .Vue 文件的模板代码块，其中用到了当前文档没有扩展名的文件名（TM_FILENAME_BASE），默认把文件名填入 name 和 class 中。\"]},{\"header\":\"三、开始使用\",\"slug\":\"三、开始使用\",\"contents\":[\"以写博客方便为例子，通过占位符和变量组合配合VSCode 代码片段生成器生成我们的 Vuepress 常用代码片段\",\"参考文章：Creating your own snippets in Visual Studio Code\"]}],\"customFields\":{\"0\":[\"VSCODE\"],\"1\":[\"工作\",\"随笔\"]}},\"/work/documents/blog/%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE.html\":{\"title\":\"Vuepress-theme-hope主题Giscus评论系统设置\",\"contents\":[{\"header\":\"\",\"slug\":\"\",\"contents\":[\"Giscus 是由由GitHub Discussions 驱动的评论系统。\",\"开源。\",\"无跟踪，无广告，永久免费。\",\"无需数据库。全部数据均储存在 GitHub Discussions 中。\",\"支持自定义主题！\",\"支持多种语言。\",\"高度可配置。\",\"自动从 GitHub 拉取新评论与编辑。\",\"可自建服务！\",\"具体操作如下所示：\"]},{\"header\":\"1、创建新仓库\",\"slug\":\"_1、创建新仓库\",\"contents\":[]},{\"header\":\"2、安装 giscus\",\"slug\":\"_2、安装-giscus\",\"contents\":[\"点击这个链接安装：GitHub Apps - giscus\",\"选择刚建立的仓库，点击 install\"]},{\"header\":\"3、配置仓库 Discussions 部分\",\"slug\":\"_3、配置仓库-discussions-部分\",\"contents\":[\"首先打开仓库的 Settings，向👇滑页面，找到Features, 将 Discussions 部分打上✅\"]},{\"header\":\"4、前往 Giscus 页面 获得设置\",\"slug\":\"_4、前往-giscus-页面-获得设置\",\"contents\":[\"点击这个链接进入 Giscus 配置页面👉 GitHub Apps - giscus\",\"配置完上述部分后，可以在启动 giscus 下边获取 data-repo, data-repo-id, data-category 和 data-category-id 这四个属性。\",\"在Vuepress-theme-hope主题配置文件中配置 provider: \\\"Giscus\\\" 并将 data-repo, data-repo-id, data-category 和 data-category-id 作为插件选项传入 repo, repoId, categorycategoryId。\"]},{\"header\":\"5、大功告成\",\"slug\":\"_5、大功告成\",\"contents\":[\"博客文章部分就有了下边的评论区👇👇👇\"]}],\"customFields\":{\"0\":[\"GITHUB\"],\"1\":[\"工作\",\"随笔\"]}},\"/work/skills/git/GIT%E5%A4%9A%E8%B4%A6%E5%8F%B7%E7%AE%A1%E7%90%86.html\":{\"title\":\"本地 git 账号关联远程 github/gitlab | git 本地如何配置多平台账号\",\"contents\":[{\"header\":\"一、问题产生背景\",\"slug\":\"一、问题产生背景\",\"contents\":[\"工作用的公司 gitlab 账号，自己平常学习用的 github 账号，又只有一个电脑，公司账号当然不能用于 github，所以需要分别配置两套密钥，分别用于自己搞事情研究和公司搬砖使用。\"]},{\"header\":\"二、本地 git 账号关联远程 github ｜ gitlab\",\"slug\":\"二、本地-git-账号关联远程-github-gitlab\",\"contents\":[\"我们必须将本地账号关联了远程账户，才能把本地代码提交到远程仓库上。\",\"道理都一样，我们以 GitHub 为例：\",\"1、本地创建 ssh-key\",\"首先，进入 .ssh 目录下\",\"接着，创建 ssh-key，xxxxx@163.com 注意替换成你自己的邮箱账号\",\"一路回车执行完上述命令后，这时会在本地的 .ssh 目录创建两个文件：\",\"2、把 id_rsa_github.pub 文件的内容复制到远程 github 上 👇\",\"点击这个链接配置 github keys：GitHub Settings - Keys\",\"3、测试拉取项目\",\"未配置多账号\",\" 我们现在有多个 id_rsa 文件，github 拉取时不知道使用哪一个 需要配置上对应的策略👉策略配置\"]},{\"header\":\"三、git 本地配置多平台账号\",\"slug\":\"三、git-本地配置多平台账号\",\"contents\":[\"我们刚刚创建 ssh-key（ xxxxx@163.com 注意替换成你自己的邮箱账号）的时候，生成了两个id_rsa_github文件，这样只能适用于一个账号多个平台，不能用于多个账号。\",\"紧接着，那我们就再生成一套新的密钥，起一个不同的名字，然后通过配置来区分 github 用我们这套新的账号配置，公司 gitlab 用我们刚刚第二步骤里生成的那套账号配置，不就可以了嘛！\",\"说干就干，还是第一步，先进入到 .ssh 目录：\",\"再次执行下面命令（这次换成你的另一个账号）\",\"敲回车之后，修改密钥的名称，起一个不同的名字，如下图所示👇。\",\"好了，这样我们就配置了两个账号的密钥，一个用来链接公司的 gitlab，一个用来折腾自己的 GitHub。\"]},{\"header\":\"四、配置秘钥使用策略\",\"slug\":\"四、配置秘钥使用策略\",\"contents\":[\"话又说回来了\",\"还有个问题，怎么知道你提交远程仓库的时候，用哪个秘钥呢？\",\"我们还需要写个配置文件，当提交到公司的远程仓库 http://xxx.github.com 的时候，我们用账号 A，提交自己的 http://xxx.gitlab.com 的时候，用账号 B。\",\"在 .ssh 目录新建 config 文件：\",\"执行命令： vi config ，敲下键盘的 i 键，切换至输入状态。\",\"输入以下代码，注意改成你自己的账号，文件名字\",\"依次按下 esc 、 : ，输入 wq ，敲下回车，保存文件。\",\"然后就可以顺利的进行多账号多个远程仓库的使用啦~\"]},{\"header\":\"五、测试一把\",\"slug\":\"五、测试一把\",\"contents\":[\"github 拉取项目✅\",\"gitlab 拉取项目✅\"]}],\"customFields\":{\"0\":[\"GIT\",\"GITHUB\"],\"1\":[\"工作\",\"随笔\"]}},\"/work/token/\":{\"title\":\"Token\",\"contents\":[]},\"/work/\":{\"title\":\"Work\",\"contents\":[]},\"/work/documents/blog/\":{\"title\":\"Blog\",\"contents\":[]},\"/work/documents/\":{\"title\":\"Documents\",\"contents\":[]},\"/work/skills/git/\":{\"title\":\"Git\",\"contents\":[]},\"/work/skills/\":{\"title\":\"Skills\",\"contents\":[]}}}");self.onmessage=({data:e})=>{self.postMessage(_(e.query,P[e.routeLocale]))};
//# sourceMappingURL=original.js.map
